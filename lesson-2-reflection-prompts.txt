What happens when you initialize a repository? Why do you need to do it?

	initialize the repository with git init. This sets up your .git directory where the version metadata is kept.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	the staging area is where you place files which are in the working directory by using git add. then, git commit will commit all files in the staging area and their future changes to the repository.

How can you use the staging area to make sure you have one commit per logical
change?
	
	oh, now I get it! .. even if you make multiple changes during a single editing process.. for example if you jump back and forth between unrelated problems in different files in your project, you can still use the staging area to commit them separately. I suppose you could also three totally different versions of a file, using the staging area as a "soft commit"

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	a branch is useful perhaps if you are working on a major feature change, something that will affect multiple files and have many lines of code, but you still need another branch to smash out smaller bugs. One branch can be a 3.0.0 pre-release branch while the master branch with version 2.1.19 is steadily being improved.

How do the diagrams help you visualize the branch structure?

	diagrams help to organize your commit history and its branches by visualizing the branch structure. usage:
	git log --graph --oneline [branch1 branch2]

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	merged branches combine various commits from separate branches. In our example, we merged the coins branch of the asteroids game into the master branch. It is important to make sure you are in the master branch when you start. 

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
